from enum import Enum

class Weather(Enum):
    SUNNY = 1.0   # No reduction in irradiance for sunny day
    CLOUDY = 0.6  # 40% reduction in irradiance for cloudy day [20-40% less]
    RAINY = 0.2   # 80% reduction in irradiance for rainy day [80-90% less]

class SolarPanel:
    def __init__(self, power_rating, efficiency, area):
        self.power_rating = power_rating    # Panel's power rating in Watts (10W) 
        self.efficiency = efficiency        # Panel's efficiency as decimal (0.15 == 15%)
        self.area = area                    # Panel's area in square meters (0.10 == 0.1m2)

    def convert_daily_ghi_to_timeStep_ghi(self, daily_irradiance, timeStep) -> float:
        # Convert daily GHI (kWh/m2) to time step GHI (W/m2)
        daily_ghi_watt_per_m2 = daily_irradiance * 1000 # Convert from kWh/m2 to W/m2
        return daily_ghi_watt_per_m2 / (24 * 3600 / timeStep)

    def calculate_power_generated(self, solar_irradiance, weather_condition: Weather = Weather.SUNNY) -> float:
        """
        Calculate the power generated by the solar panel based on solar irradiance and weather condition.
        :param solar_irradiance: Solar irradiance in W/m²
        :param weather_condition: Enum value from Weather (SUNNY, CLOUDY, RAINY)
        :return: Power generated in Watts (W)
        """
        adjusted_irradiance = solar_irradiance * weather_condition.value
        power_generated = adjusted_irradiance * self.area * self.efficiency
        return power_generated  # In Watts (W)
    
    def calculate_current(self, solar_irradiance, weather_condition : Weather = Weather.SUNNY) -> float:
        """
        Calculate the current generated by the solar panel based on solar irradiance and weather condition.
        :param solar_irradiance: Solar irradiance in W/m²
        :param weather_condition: Enum value from Weather (SUNNY, CLOUDY, RAINY)
        :return: Current in amperes (A)
        """
        current = self.calculate_power_generated(solar_irradiance, weather_condition) / self.power_rating
        return current  # In Amperes (A)

if __name__ == "__main__":
    # Example of usage
    # 1. Create a solar panel with the specific caracteristics:
    solar_panel = SolarPanel(power_rating=10, efficiency=0.15, area=(0.42 * 0.28))

    # 2. Get the GHI (Global Horizontal Irradiance) of a knowed place
    # > Go to this website: https://globalsolaratlas.info/
    # > Select a place, and save the value of GHI *per Day*
    # -> Example: Cartagena, GHI per Day: 4.900 kWh/m2
    solar_irradiance = solar_panel.convert_daily_ghi_to_timeStep_ghi(daily_irradiance=4900, timeStep=0.5)

    # 3. Calculate the current for the selected timeStep
    # > We can select the weather of the actual step
    current_sunny = solar_panel.calculate_current(solar_irradiance=solar_irradiance, weather_condition=Weather.SUNNY)
    current_cloudy = solar_panel.calculate_current(solar_irradiance=solar_irradiance, weather_condition=Weather.CLOUDY)
    current_rainy = solar_panel.calculate_current(solar_irradiance=solar_irradiance, weather_condition=Weather.RAINY)

    print(f"Current for the time step under Sunny conditions: {current_sunny} A")
    print(f"Current for the time step under Cloudy conditions: {current_cloudy} A")
    print(f"Current for the time step under Rainy conditions: {current_rainy} A")

